<%- include('layout', { body: '<div>\nContent here\n</div>' }) %>
<!-- Floating conversations button for mobile -->
<button id="convFloating" class="btn btn-primary conv-floating d-lg-none" aria-label="Open conversations">
  <i class="fas fa-comments"></i>
</button>
<div class="chat-container">
  <div class="row g-0">
  <!-- Sidebar with conversations -->
  <div class="col-md-4 col-lg-3 border-end conversations-col">
      <div class="p-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4 class="mb-0">Conversations</h4>
          <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#newChatModal">
            <i class="fas fa-plus"></i> New Chat
          </button>
        </div>
        <div class="input-group mb-3">
          <input type="text" id="searchInput" class="form-control" placeholder="Search contacts...">
          <button class="btn btn-outline-secondary" type="button" id="searchButton">
            <i class="fas fa-search"></i>
          </button>
        </div>
        <div class="conversation-list">
          <% if (conversations && conversations.length > 0) { %>
            <% conversations.forEach(conversation => { %>
              <% 
                // Find the other participant (not current user)
                const otherUser = conversation.participants.find(p => p._id.toString() !== user._id.toString());
                if (!otherUser) return;
                
                // Get unread count for current user
                const unreadCount = conversation.unreadCount && conversation.unreadCount.get(user._id.toString()) || 0;
                
                // Format last message time
                let lastMessageTime = '';
                if (conversation.lastMessage) {
                  const date = new Date(conversation.lastMessage.createdAt);
                  lastMessageTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                }
                
                // Check if user is online
                const isOnline = otherUser.status === 'online';
              %>
              <div class="conversation-item d-flex align-items-center p-2 border-bottom" 
                   data-user-id="<%= otherUser._id %>">
                <div class="position-relative">
                  <img src="/img/<%= otherUser.avatar %>" alt="<%= otherUser.name %>" 
                       class="rounded-circle me-2" width="50" height="50">
                  <% if (isOnline) { %>
                    <span class="position-absolute bottom-0 end-0 bg-success rounded-circle p-1"
                          style="width: 12px; height: 12px;"></span>
                  <% } %>
                </div>
                <div class="flex-grow-1 ms-2">
                  <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0"><%= otherUser.name %></h6>
                    <small class="text-muted"><%= lastMessageTime %></small>
                  </div>
                  <% if (conversation.lastMessage) { %>
                    <p class="text-truncate mb-0 small">
                      <%= conversation.lastMessage.content %>
                    </p>
                  <% } else { %>
                    <p class="text-truncate mb-0 small text-muted">No messages yet</p>
                  <% } %>
                </div>
                <% if (unreadCount > 0) { %>
                  <span class="badge bg-primary rounded-pill ms-2"><%= unreadCount %></span>
                <% } %>
              </div>
            <% }); %>
          <% } else { %>
            <div class="text-center py-4">
              <p class="text-muted">No conversations yet</p>
              <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#newChatModal">
                Start a new chat
              </button>
            </div>
          <% } %>
        </div>
      </div>
    </div>
    
    <!-- Chat area -->
    <div class="col-md-8 col-lg-9">
      <div class="chat-area d-flex flex-column" style="height: calc(100vh - 150px);">
        <!-- Chat header -->
        <div class="chat-header p-3 border-bottom d-none" id="chatHeader">
          <div class="d-flex align-items-center">
            <button class="btn btn-sm btn-attach d-md-none me-2" id="convToggle" aria-label="Open conversations">
              <i class="fas fa-bars"></i>
            </button>
            <div class="position-relative">
              <img src="" alt="" id="chatUserAvatar" class="rounded-circle me-2" width="40" height="40">
              <span class="position-absolute bottom-0 end-0 rounded-circle p-1" id="chatUserStatus"
                    style="width: 10px; height: 10px;"></span>
            </div>
            <div>
              <h5 class="mb-0" id="chatUserName"></h5>
              <small class="text-muted" id="chatUserStatus">Offline</small>
            </div>
          </div>
        </div>
        
        <!-- Messages container -->
        <div class="messages-container flex-grow-1 p-3 overflow-auto" id="messagesContainer">
          <div class="text-center py-5" id="noChatSelected">
            <i class="fas fa-comments fa-3x text-muted mb-3"></i>
            <h5>Select a conversation to start chatting</h5>
          </div>
        </div>
        
        <!-- Message input -->
        <div class="message-input p-3 border-top d-none" id="messageInputContainer">
          <form id="messageForm">
            <div class="input-group">
              <input type="text" id="messageInput" class="form-control" placeholder="Type a message...">
              <button type="button" id="attachButton" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#fileUploadModal">
                <i class="fas fa-paperclip"></i>
              </button>
              <button class="btn btn-primary" type="submit">
                <i class="fas fa-paper-plane"></i>
              </button>
            </div>
          </form>
          <small class="text-muted d-none" id="typingIndicator">Someone is typing...</small>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- New Chat Modal -->
<div class="modal fade" id="newChatModal" tabindex="-1" aria-labelledby="newChatModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="newChatModalLabel">Start New Chat</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="input-group mb-3">
          <input type="text" id="newChatSearchInput" class="form-control" placeholder="Search users...">
          <button class="btn btn-outline-secondary" type="button" id="newChatSearchButton">
            <i class="fas fa-search"></i>
          </button>
        </div>
        <div id="userSearchResults" class="mt-3">
          <% if (users && users.length > 0) { %>
            <% users.forEach(user => { %>
              <div class="user-item d-flex align-items-center p-2 border-bottom" data-user-id="<%= user._id %>">
                <img src="/img/<%= user.avatar %>" alt="<%= user.name %>" class="rounded-circle me-2" width="40" height="40">
                <div>
                  <h6 class="mb-0"><%= user.name %></h6>
                  <small class="text-muted"><%= user.email %></small>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <p class="text-center text-muted">No users found</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Socket.io specific script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Connect to Socket.io
    const socket = io();
    const currentUserId = '<%= user._id %>';
    let currentChatUserId = null;
    let currentConversationId = null;
    let typingTimeout = null;
    
    // Connect user
    socket.emit('user_connected', currentUserId);
    
    // Handle conversation click
    document.querySelectorAll('.conversation-item').forEach(item => {
      item.addEventListener('click', function() {
        const userId = this.dataset.userId;
        loadConversation(userId);
      });
    });
    
    // Handle user item click in new chat modal
    document.querySelectorAll('.user-item').forEach(item => {
      item.addEventListener('click', function() {
        const userId = this.dataset.userId;
        const modal = bootstrap.Modal.getInstance(document.getElementById('newChatModal'));
        modal.hide();
        loadConversation(userId);
      });
    });
    
    // Load conversation
    function loadConversation(userId) {
      currentChatUserId = userId;
      
      // Show loading state
      document.getElementById('noChatSelected').innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
      
      // Fetch conversation
      fetch(`/chat/conversation/${userId}`)
        .then(response => response.json())
        .then(data => {
          // Update UI
          document.getElementById('noChatSelected').classList.add('d-none');
          document.getElementById('chatHeader').classList.remove('d-none');
          document.getElementById('messageInputContainer').classList.remove('d-none');
          
          // Set conversation ID
          currentConversationId = data.conversation;
          
          // Update chat header
          document.getElementById('chatUserName').textContent = data.user.name;
          document.getElementById('chatUserAvatar').src = `/img/${data.user.avatar}`;
          document.getElementById('chatUserAvatar').alt = data.user.name;
          
          // Update status indicator
          const statusIndicator = document.getElementById('chatUserStatus');
          if (data.user.status === 'online') {
            statusIndicator.classList.add('bg-success');
            statusIndicator.classList.remove('bg-secondary');
            document.getElementById('chatUserStatus').textContent = 'Online';
          } else {
            statusIndicator.classList.add('bg-secondary');
            statusIndicator.classList.remove('bg-success');
            const lastSeen = new Date(data.user.lastSeen);
            document.getElementById('chatUserStatus').textContent = `Last seen ${lastSeen.toLocaleString()}`;
          }
          
          // Display messages
          displayMessages(data.messages);
          
          // Mark as read
          socket.emit('mark_read', { conversationId: currentConversationId, userId: currentUserId });
        })
        .catch(error => {
          console.error('Error loading conversation:', error);
          document.getElementById('noChatSelected').innerHTML = '<p class="text-danger">Failed to load conversation</p>';
        });
    }
    
    // Display messages
    function displayMessages(messages) {
      const messagesContainer = document.getElementById('messagesContainer');
      messagesContainer.innerHTML = '';
      
      if (messages.length === 0) {
        messagesContainer.innerHTML = '<div class="text-center py-3"><p class="text-muted">No messages yet</p></div>';
        return;
      }
      
      messages.forEach(message => {
        const isCurrentUser = message.sender._id === currentUserId;
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isCurrentUser ? 'message-out' : 'message-in'} mb-2`;
        
        const messageContent = `
          <div class="${isCurrentUser ? 'ms-auto' : 'me-auto'} message-bubble p-2 rounded ${isCurrentUser ? 'bg-primary text-white' : 'bg-light'}" style="max-width: 75%;">
            <div class="message-text">${message.content}</div>
            <div class="message-time text-end">
              <small class="${isCurrentUser ? 'text-white-50' : 'text-muted'}">
                ${new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                ${isCurrentUser ? (message.isRead ? '<i class="fas fa-check-double"></i>' : '<i class="fas fa-check"></i>') : ''}
              </small>
            </div>
          </div>
        `;
        
        messageDiv.innerHTML = messageContent;
        messagesContainer.appendChild(messageDiv);
      });
      
      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Send message
    document.getElementById('messageForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const messageInput = document.getElementById('messageInput');
      const content = messageInput.value.trim();
      
      if (content && currentChatUserId) {
        // Emit message to server
        socket.emit('send_message', {
          sender: currentUserId,
          recipient: currentChatUserId,
          content
        });
        
        // Clear input
        messageInput.value = '';
        
        // Stop typing indicator
        socket.emit('stop_typing', {
          sender: currentUserId,
          recipient: currentChatUserId
        });
      }
    });
    
    // Handle typing
    document.getElementById('messageInput').addEventListener('input', function() {
      if (currentChatUserId) {
        // Clear previous timeout
        if (typingTimeout) {
          clearTimeout(typingTimeout);
        }
        
        // Emit typing event
        socket.emit('typing', {
          sender: currentUserId,
          recipient: currentChatUserId
        });
        
        // Set timeout to stop typing
        typingTimeout = setTimeout(() => {
          socket.emit('stop_typing', {
            sender: currentUserId,
            recipient: currentChatUserId
          });
        }, 3000);
      }
    });
    
    // Handle search
    document.getElementById('searchButton').addEventListener('click', function() {
      const searchTerm = document.getElementById('searchInput').value.trim();
      if (searchTerm) {
        searchUsers(searchTerm);
      }
    });
    
    document.getElementById('newChatSearchButton').addEventListener('click', function() {
      const searchTerm = document.getElementById('newChatSearchInput').value.trim();
      if (searchTerm) {
        searchUsers(searchTerm, 'userSearchResults');
      }
    });
    
    // Search users
    function searchUsers(term, containerId = 'conversationList') {
      fetch(`/chat/search?term=${encodeURIComponent(term)}`)
        .then(response => response.json())
        .then(users => {
          const container = document.getElementById(containerId);
          
          if (users.length === 0) {
            container.innerHTML = '<p class="text-center text-muted">No users found</p>';
            return;
          }
          
          container.innerHTML = '';
          users.forEach(user => {
            const userItem = document.createElement('div');
            userItem.className = 'user-item d-flex align-items-center p-2 border-bottom';
            userItem.dataset.userId = user._id;
            
            userItem.innerHTML = `
              <img src="/img/${user.avatar}" alt="${user.name}" class="rounded-circle me-2" width="40" height="40">
              <div>
                <h6 class="mb-0">${user.name}</h6>
                <small class="text-muted">${user.email}</small>
              </div>
            `;
            
            userItem.addEventListener('click', function() {
              if (containerId === 'userSearchResults') {
                const modal = bootstrap.Modal.getInstance(document.getElementById('newChatModal'));
                modal.hide();
              }
              loadConversation(user._id);
            });
            
            container.appendChild(userItem);
          });
        })
        .catch(error => {
          console.error('Error searching users:', error);
        });
    }
    
    // Socket events
    socket.on('receive_message', function(message) {
      // If this is from the current chat, add it to the messages
      if (currentChatUserId === message.sender._id) {
        const messagesContainer = document.getElementById('messagesContainer');
        
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message message-in mb-2';
        
        const messageContent = `
          <div class="me-auto message-bubble p-2 rounded bg-light" style="max-width: 75%;">
            <div class="message-text">${message.content}</div>
            <div class="message-time text-end">
              <small class="text-muted">
                ${new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              </small>
            </div>
          </div>
        `;
        
        messageDiv.innerHTML = messageContent;
        messagesContainer.appendChild(messageDiv);
        
        // Scroll to bottom
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // Mark as read
        socket.emit('mark_read', { conversationId: currentConversationId, userId: currentUserId });
      } else {
        // Update conversation list to show new message
        // This would require a more complex implementation to update the UI
        // For simplicity, we'll just show a notification
        const notification = new Notification(`New message from ${message.sender.name}`, {
          body: message.content
        });
        
        notification.onclick = function() {
          window.focus();
          loadConversation(message.sender._id);
        };
      }
    });
    
    socket.on('message_sent', function(message) {
      // Add sent message to the UI
      const messagesContainer = document.getElementById('messagesContainer');
      
      const messageDiv = document.createElement('div');
      messageDiv.className = 'message message-out mb-2';
      
      const messageContent = `
        <div class="ms-auto message-bubble p-2 rounded bg-primary text-white" style="max-width: 75%;">
          <div class="message-text">${message.content}</div>
          <div class="message-time text-end">
            <small class="text-white-50">
              ${new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              <i class="fas fa-check"></i>
            </small>
          </div>
        </div>
      `;
      
      messageDiv.innerHTML = messageContent;
      messagesContainer.appendChild(messageDiv);
      
      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });
    
    socket.on('user_typing', function(data) {
      if (currentChatUserId === data.userId) {
        document.getElementById('typingIndicator').classList.remove('d-none');
      }
    });
    
    socket.on('user_stop_typing', function(data) {
      if (currentChatUserId === data.userId) {
        document.getElementById('typingIndicator').classList.add('d-none');
      }
    });
    
    socket.on('messages_read', function(data) {
      if (currentChatUserId === data.userId) {
        // Update read receipts
        document.querySelectorAll('.message-out .fa-check').forEach(icon => {
          icon.classList.remove('fa-check');
          icon.classList.add('fa-check-double');
        });
      }
    });
    
    socket.on('user_status_change', function(data) {
      // Update user status in the conversation list
      if (currentChatUserId === data.userId) {
        const statusIndicator = document.getElementById('chatUserStatus');
        if (data.status === 'online') {
          statusIndicator.classList.add('bg-success');
          statusIndicator.classList.remove('bg-secondary');
          document.getElementById('chatUserStatus').textContent = 'Online';
        } else {
          statusIndicator.classList.add('bg-secondary');
          statusIndicator.classList.remove('bg-success');
          const lastSeen = new Date(data.lastSeen);
          document.getElementById('chatUserStatus').textContent = `Last seen ${lastSeen.toLocaleString()}`;
        }
      }
    });
    
    // Request notification permission
    if (Notification.permission !== 'granted') {
      Notification.requestPermission();
    }
  });
</script>' }) %>